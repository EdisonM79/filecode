<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
    <!-- Spring 配置 -->
    <context:annotation-config />
    <!--扫描注解 -->
    <context:component-scan base-package="com.jzsk.filecode" />
 
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="do*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="login*" propagation="REQUIRED" />
            <tx:method name="regist*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置那些类的方法进行事务管理 -->
    <!-- <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution (* com.jksmart.yqx.service.*+.do*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
    </aop:config> -->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution (* com.jzsk.filecode.service.*+.do*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
    </aop:config>
     
    <!-- 数据库和事务配置 -->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 定义数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass" value="com.mysql.jdbc.Driver">
            <!--  <value>"com.mysql.jdbc.Driver"</value>-->
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
		<!-- 连接池中保留的最小连接数。 -->
        <property name="minPoolSize">
            <value>5</value>
        </property>
		<!-- 连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>15</value>
        </property>
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 5 -->
        <property name="initialPoolSize">
            <value>5</value>
        </property>
		<!-- 当调用Close，不要Commit -->
		<property name="autoCommitOnClose" value="false"></property>
		<!-- 获取连接的超时时间，默认无限等待 -->
		<property name="checkoutTimeout" value="1000"></property>
		<!-- 当获取数据库连接失败后，重试的次数 -->
		<property name="acquireRetryAttempts" value="2"></property>
		<!-- 每30秒检查所有连接池中的空闲连接。Default: 0 -->
		<!-- <property name="idleConnectionTestPeriod"> -->
		<!-- <value>${c3p0.idleConnectionTestPeriod}</value> -->
		<!-- </property> -->
    </bean>
    
	<!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis.cfg.xml" />
        <property name="mapperLocations" value="classpath*:mybatis/mybatis-*.xml"/>
        <!-- 扫描modal包，使用别名:com.jksmart.lzrs.model.entity to entity-->
        <!-- <property name="typeAliasesPackage" value="com.jksmart.lzrs.modal" /> -->
        <!-- 扫描model包，使用别名:com.sct.oa.model.entity to entity-->
        <property name="typeAliasesPackage" value="com.jzsk.filecode.model.entity" />
    </bean>
    <!-- 扫描DAO接口包,动态实现DAO接口 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <!--<property name="sqlSessionFactory"  ref="sqlSessionFactory"/> -->
        <!-- <property name="basePackage" value="com.jksmart.lzrs.dao"></property> -->
        <property name="basePackage" value="com.jzsk.filecode.dao"></property>
        <!-- dataosource后处理的方式 -->
        <property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/> 
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean> 
  
   <!--RedisDao 
    <bean id="redisDao" class="com.jksmart.yqx.dao.cache.RedisDao">
    <constructor-arg index="0" value="192.168.1.99"/>
    <constructor-arg index="1" value="6379"/>
    </bean>-->
	<!-- <import resource="classpath*:**/spring-*.xml"/> -->
</beans>